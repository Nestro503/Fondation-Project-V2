import cv2
import numpy as np
pip install scipy
from scipy.optimize import curve_fit

def fit_serpentine_curve(points):
    # Fonction pour ajuster une courbe sinusoïdale à une série de points
    def sin_func(x, a, b, c, d):
        return a * np.sin(b * x + c) + d

    # Conversion des coordonnées des points en tableaux numpy
    x = np.array([pt[0] for pt in points])
    y = np.array([pt[1] for pt in points])

    # Ajustement de la courbe sinusoïdale aux points
    popt, _ = curve_fit(sin_func, x, y)

    return popt

def detect_and_analyze_serpentine(image_path):
    # Chargement de l'image en niveaux de gris
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Réduction du bruit et détection des contours
    blurred = cv2.GaussianBlur(image, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)

    # Recherche des contours fermés dans l'image
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Sélection du plus grand contour (supposé être la trajectoire)
    largest_contour = max(contours, key=cv2.contourArea)

    # Approximation du contour par une série de points
    epsilon = 0.02 * cv2.arcLength(largest_contour, True)
    approx_points = cv2.approxPolyDP(largest_contour, epsilon, True)
    approx_points = [tuple(pt[0]) for pt in approx_points]

    # Ajustement d'une courbe sinusoïdale à la série de points
    curve_params = fit_serpentine_curve(approx_points)

    # Dessin de la courbe sinusoïdale ajustée sur une nouvelle image
    fit_image = np.zeros_like(image)
    x_range = np.linspace(min(approx_points, key=lambda pt: pt[0])[0],
                          max(approx_points, key=lambda pt: pt[0])[0], 500)
    y_fit = curve_params[0] * np.sin(curve_params[1] * x_range + curve_params[2]) + curve_params[3]
    curve_points = np.column_stack((x_range.astype(int), y_fit.astype(int)))
    cv2.polylines(fit_image, [curve_points], isClosed=False, color=(255, 255, 255), thickness=2)

    # Calcul des distances entre les points sur la courbe
    distances = [np.linalg.norm(np.array(approx_points[i]) - np.array(approx_points[i+1]))
                 for i in range(len(approx_points) - 1)]

    # Affichage des résultats sur l'image
    result_image = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)
    for i, pt in enumerate(approx_points):
        cv2.circle(result_image, pt, 3, (0, 255, 0), -1)
        cv2.putText(result_image, f"{i}", (pt[0] + 5, pt[1] - 5), cv2.FONT_HERSHEY_SIMPLEX,
                    0.5, (255, 0, 0), 1, cv2.LINE_AA)

    cv2.imshow('Detected Serpentine', result_image)
    cv2.imshow('Fitted Curve', fit_image)
    cv2.waitKey(0)

    # Calcul des angles entre les segments de droite
    angles = []
    for i in range(len(curve_points) - 2):
        vec1 = np.array(curve_points[i+1]) - np.array(curve_points[i])
        vec2 = np.array(curve_points[i+2]) - np.array(curve_points[i+1])
        cosine_angle = np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))
        angle_degrees = np.degrees(np.arccos(cosine_angle))
        angles.append(angle_degrees)

    print(f"Distances entre les points sur la courbe: {distances}")
    print(f"Angles entre les segments de la courbe: {angles}")

    cv2.destroyAllWindows()

# Exemple d'utilisation
image_path = 'path_planning/img/serpentin.png'
detect_and_analyze_serpentine(image_path)
