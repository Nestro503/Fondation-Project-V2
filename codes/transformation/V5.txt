
speed = 26
def case_to_duration(cases):
    return int((cases / speed) * 1000)  # Duration in ms for given number of cases

def generate_movements(coords):
    nodes = []
    movements = []
    current_direction = None
    distance_count = 0

    for i in range(1, len(coords)):
        x_diff = coords[i][0] - coords[i-1][0]
        y_diff = coords[i][1] - coords[i-1][1]
        new_direction = (x_diff, y_diff)

        if new_direction == current_direction:
            distance_count += 1
        else:
            if current_direction is not None:
                duration = case_to_duration(distance_count)
                movements.append(f"moveForward({duration})")
                nodes.append(coords[i-1])

                # Détection de la direction de rotation en fonction des changements de direction
                if current_direction == (0, 1):  # allant vers le bas
                    if new_direction == (1, 0):  # tourner à droite
                        movements.append("turnRight(400)")
                    elif new_direction == (-1, 0):  # tourner à gauche
                        movements.append("turnLeft(400)")
                elif current_direction == (1, 0):  # allant vers la droite
                    if new_direction == (0, -1):  # tourner vers le haut
                        movements.append("turnRight(400)")
                    elif new_direction == (0, 1):  # tourner vers le bas
                        movements.append("turnLeft(400)")
                elif current_direction == (0, -1):  # allant vers le haut
                    if new_direction == (-1, 0):  # tourner vers la gauche
                        movements.append("turnRight(400)")
                    elif new_direction == (1, 0):  # tourner vers la droite
                        movements.append("turnLeft(400)")
                elif current_direction == (-1, 0):  # allant vers la gauche
                    if new_direction == (0, 1):  # tourner vers le bas
                        movements.append("turnRight(400)")
                    elif new_direction == (0, -1):  # tourner vers le haut
                        movements.append("turnLeft(400)")

            current_direction = new_direction
            distance_count = 1

    # Ajouter le dernier mouvement
    duration = case_to_duration(distance_count)
    movements.append(f"moveForward({duration})")
    nodes.append(coords[-1])

    return nodes, movements

# Coordonnées prédéfinies que vous pouvez modifier
coordinates = [
    (14, 31), (14, 32), (14, 33), (14, 34), (14, 35),
    (14, 36), (14, 37), (14, 38), (14, 39), (14, 40),
    (14, 41), (14, 42), (14, 43), (14, 44), (15, 44),
    (16, 44), (17, 44), (18, 44), (19, 44)
]

# Exemple d'utilisation
nodes, movements = generate_movements(coordinates)
print("Coordonnées des nœuds :", nodes)
print("Séquence des mouvements :")
for move in movements:
    print(move)
