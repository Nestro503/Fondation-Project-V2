import time
import urllib.request

# Adresse IP du robot
root_url = "http://192.168.86.71/"

# Données d'entrée
angle = 420
speed = 26
dx = 1  # Taille horizontale des cases
dy = 1  # Taille verticale des cases
coordinates = [
    (14, 31), (14, 32), (14, 33), (14, 34), (14, 35),
    (14, 36), (14, 37), (14, 38), (14, 39), (14, 40),
    (14, 41), (14, 42), (14, 43), (14, 44), (15, 44),
    (16, 44), (17, 44), (18, 44), (19, 44)
]

def sendRequest(url, retries=3, timeout=5):
    attempt = 0
    while attempt < retries:
        try:
            response = urllib.request.urlopen(url, timeout=timeout)
            response_text = response.read().decode()
            print(response_text)
            return True, response_text
        except Exception as e:
            attempt += 1
            print(f"Attempt {attempt} failed: {e}")
            time.sleep(0.5)  # Reduced sleep time between retries
    print(f"Failed to send request to {url} after {retries} attempts.")
    sendCommand("stop", 0)  # Stop the motors for safety
    return False, ""

def sendCommand(command, duration):
    url = f"{root_url}command?command={command}&duration={duration}"
    success, response = sendRequest(url)
    if success:
        time.sleep((duration + 50) / 1000)  # Reduced delay after each command
    return success

def moveForward(duration):
    sendCommand("moveForward", duration)
    time.sleep((duration + 50) / 1000)

def moveBackward(duration):
    sendCommand("moveBackward", duration)
    time.sleep((duration + 50) / 1000)

def turnLeft(duration):
    sendCommand("turnLeft", duration)
    time.sleep((duration + 50) / 1000)

def turnRight(duration):
    sendCommand("turnRight", duration)
    time.sleep((duration + 50) / 1000)

def case_to_duration(cases, speed, case_size):
    return int((cases * case_size / speed) * 1000)  # Duration in ms for given number of cases

def generate_movements(coords, speed, dx, dy):
    nodes = []
    movements = []
    current_direction = None
    distance_count = 0

    for i in range(1, len(coords)):
        x_diff = coords[i][0] - coords[i-1][0]
        y_diff = coords[i][1] - coords[i-1][1]
        new_direction = (x_diff, y_diff)

        if new_direction == current_direction:
            distance_count += 1
        else:
            if current_direction is not None:
                case_size = dy if current_direction in [(0, 1), (0, -1)] else dx
                duration = case_to_duration(distance_count, speed, case_size)
                movements.append(f"moveForward({duration})")
                moveForward(duration)  # Envoyer la commande au robot
                nodes.append(coords[i-1])

                # Détection de la direction de rotation en fonction des changements de direction
                if current_direction == (0, 1):  # allant vers le bas
                    if new_direction == (1, 0):  # tourner à droite
                        movements.append("turnRight(400)")
                        turnRight(angle)  # Envoyer la commande au robot
                    elif new_direction == (-1, 0):  # tourner à gauche
                        movements.append("turnLeft(400)")
                        turnLeft(angle)  # Envoyer la commande au robot
                elif current_direction == (1, 0):  # allant vers la droite
                    if new_direction == (0, -1):  # tourner vers le haut
                        movements.append("turnRight(400)")
                        turnRight(angle)  # Envoyer la commande au robot
                    elif new_direction == (0, 1):  # tourner vers le bas
                        movements.append("turnLeft(400)")
                        turnLeft(angle)  # Envoyer la commande au robot
                elif current_direction == (0, -1):  # allant vers le haut
                    if new_direction == (-1, 0):  # tourner vers la gauche
                        movements.append("turnRight(400)")
                        turnRight(angle)  # Envoyer la commande au robot
                    elif new_direction == (1, 0):  # tourner vers la droite
                        movements.append("turnLeft(400)")
                        turnLeft(angle)  # Envoyer la commande au robot
                elif current_direction == (-1, 0):  # allant vers la gauche
                    if new_direction == (0, 1):  # tourner vers le bas
                        movements.append("turnRight(400)")
                        turnRight(angle)  # Envoyer la commande au robot
                    elif new_direction == (0, -1):  # tourner vers le haut
                        movements.append("turnLeft(400)")
                        turnLeft(angle)  # Envoyer la commande au robot

            current_direction = new_direction
            distance_count = 1

    # Ajouter le dernier mouvement
    case_size = dy if current_direction in [(0, 1), (0, -1)] else dx
    duration = case_to_duration(distance_count, speed, case_size)
    movements.append(f"moveForward({duration})")
    moveForward(duration)  # Envoyer la commande au robot
    nodes.append(coords[-1])

    return nodes, movements

def FS4(speed, dx, dy, coordinates):
    nodes, movements = generate_movements(coordinates, speed, dx, dy)
    print("Coordonnées des nœuds :", nodes)
    print("Séquence des mouvements :")
    for move in movements:
        print(move)

FS4(speed, dx, dy, coordinates)
