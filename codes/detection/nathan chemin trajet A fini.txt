import numpy as np
import time
import cv2
import cv2.aruco as aruco
import math
from queue import PriorityQueue
import pygame
import heapq

ARUCO_DICT = {
    "DICT_ARUCO_ORIGINAL": cv2.aruco.DICT_ARUCO_ORIGINAL,
}

# Constantes

# Mettre à 0 pour video, 1 pour photos, 2 pour vrai truc
TEST = 2

# Mettre à 1 pour des prints de debug, 0 pour pas debug
DEBUG = 1

DISTANCE_COIN_ARUCO_X_MM = 2940
DISTANCE_COIN_Y_MM = 1940

TAILLE_ARUCO_COIN = 100
LONGUEUR_CALIBRATION = 90

IMAGE_LONGUEUR = 1920
IMAGE_LARGEUR = 1080

CONSTANTE_RECADRAGE = 10
IMAGE_RECADRE_LONGUEUR = 1600
IMAGE_RECADRE_LARGEUR = 900

RADIUS_ROBOT = 100
QUAD_RES = 20

ARRIV_COORDS = [
    ((365, 85, 475, 175), (0, 255, 255), 'jaune'),  # Jaune
    ((365, 730, 475, 820), (255, 0, 255), 'magenta'),  # Magenta
    ((1130, 85, 1230, 175), (255, 0, 0), 'bleu'),  # Bleu
    ((1130, 730, 1230, 820), (0, 255, 0), 'vert')  # Vert

]

RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 255, 0)
YELLOW = (255, 255, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
PURPLE = (128, 0, 128)
ORANGE = (255, 165, 0)
GREY = (128, 128, 128)
TURQUOISE = (64, 224, 208)

arucoop = (400, 400)
closest_coord = None
min_distance = float('inf')  # Initialiser à l'infini


def trouver_arucos_coins(corners, ids):
    # Initialize all variables at the beginning of the function to ensure they have some default value.
    x_aruco_0 = y_aruco_0 = x_aruco_1 = y_aruco_1 = 0
    x_aruco_2 = y_aruco_2 = x_aruco_3 = y_aruco_3 = 0

    # Early return if there are not enough corners to process
    if len(corners) <= 1:
        # Return None or 0 for all values indicating the function cannot proceed with calculations
        return (None, None, None, None, None, None, None, None, None, None, None, None, None, None)

    # Processing starts here because there are more than 1 corner
    index_aruco_0 = np.where(ids == 0)[0]
    index_aruco_1 = np.where(ids == 1)[0]
    index_aruco_2 = np.where(ids == 2)[0]
    index_aruco_3 = np.where(ids == 3)[0]

    if index_aruco_0.size > 0:
        x_aruco_0, y_aruco_0 = corners[index_aruco_0[0]][0][0][0], corners[index_aruco_0[0]][0][0][1]
    if index_aruco_1.size > 0:
        x_aruco_1, y_aruco_1 = corners[index_aruco_1[0]][0][1][0], corners[index_aruco_1[0]][0][1][1]
    if index_aruco_2.size > 0:
        x_aruco_2, y_aruco_2 = corners[index_aruco_2[0]][0][2][0], corners[index_aruco_2[0]][0][2][1]
    if index_aruco_3.size > 0:
        x_aruco_3, y_aruco_3 = corners[index_aruco_3[0]][0][3][0], corners[index_aruco_3[0]][0][3][1]

    return x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3


def calcul_pixel_mm(x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3):
    # Initialize all variables at the beginning of the function to ensure they have some default value.
    pixel_distance_x = pixel_distance_y = 0
    mm_nbr_pixel_x = mm_nbr_pixel_y = pixel_nbr_mm_x = pixel_nbr_mm_y = 0

    # Calculate distances and ratios
    # Ensure there's a check to prevent division by zero
    if x_aruco_2 and x_aruco_3 and y_aruco_2 and y_aruco_3:
        pixel_distance_x = abs((x_aruco_2 - x_aruco_3) + (x_aruco_1 - x_aruco_0)) / 2
        pixel_distance_y = abs((y_aruco_2 - y_aruco_1) + (y_aruco_3 - y_aruco_0)) / 2

        if DEBUG:
            print("[Inference] pixel_distance_x: {:.2f}, pixel_distance_y: {:.2f}".format(pixel_distance_x,
                                                                                          pixel_distance_y))

        if pixel_distance_x == 0 or pixel_distance_y == 0:
            # Handle the case where division by zero would occur
            return (None, None, None, None, None, None)

        mm_nbr_pixel_x = float(pixel_distance_x) / DISTANCE_COIN_ARUCO_X_MM
        pixel_nbr_mm_x = 1 / mm_nbr_pixel_x if mm_nbr_pixel_x else None

        mm_nbr_pixel_y = float(pixel_distance_y) / DISTANCE_COIN_Y_MM
        pixel_nbr_mm_y = 1 / mm_nbr_pixel_y if mm_nbr_pixel_y else None

        if DEBUG:
            print("[Inference] mm_nbr_pixel_x: {:.2f}, pixel_nbr_mm_x: {:.2f}".format(mm_nbr_pixel_x, pixel_nbr_mm_x))
            print("[Inference] mm_nbr_pixel_y: {:.2f}, pixel_nbr_mm_y: {:.2f}".format(mm_nbr_pixel_y, pixel_nbr_mm_y))

    else:
        # If we can't calculate distances because markers are not detected, return Nones or zeros
        return (None, None, None, None, None, None)

    return pixel_distance_x, mm_nbr_pixel_x, pixel_nbr_mm_x, pixel_distance_y, mm_nbr_pixel_y, pixel_nbr_mm_y


def calculate_pixel_distance(corners, ids):
    # Initialize all variables at the beginning of the function to ensure they have some default value.
    pixel_distance_x = pixel_distance_y = 0
    mm_nbr_pixel_x = mm_nbr_pixel_y = pixel_nbr_mm_x = pixel_nbr_mm_y = 0
    x_aruco_0 = y_aruco_0 = x_aruco_1 = y_aruco_1 = 0
    x_aruco_2 = y_aruco_2 = x_aruco_3 = y_aruco_3 = 0

    # Early return if there are not enough corners to process
    if len(corners) <= 1:
        # Return None or 0 for all values indicating the function cannot proceed with calculations
        return (None, None, None, None, None, None, None, None, None, None, None, None, None, None)

    # Processing starts here because there are more than 1 corner
    index_aruco_0 = np.where(ids == 0)[0]
    index_aruco_1 = np.where(ids == 1)[0]
    index_aruco_2 = np.where(ids == 2)[0]
    index_aruco_3 = np.where(ids == 3)[0]

    if index_aruco_0.size > 0:
        x_aruco_0, y_aruco_0 = corners[index_aruco_0[0]][0][0][0], corners[index_aruco_0[0]][0][0][1]
    if index_aruco_1.size > 0:
        x_aruco_1, y_aruco_1 = corners[index_aruco_1[0]][0][1][0], corners[index_aruco_1[0]][0][1][1]
    if index_aruco_2.size > 0:
        x_aruco_2, y_aruco_2 = corners[index_aruco_2[0]][0][2][0], corners[index_aruco_2[0]][0][2][1]
    if index_aruco_3.size > 0:
        x_aruco_3, y_aruco_3 = corners[index_aruco_3[0]][0][3][0], corners[index_aruco_3[0]][0][3][1]

    # Calculate distances and ratios
    # Ensure there's a check to prevent division by zero
    if x_aruco_2 and x_aruco_3 and y_aruco_2 and y_aruco_3:
        pixel_distance_x = abs(x_aruco_2 - x_aruco_3)
        pixel_distance_y = abs(y_aruco_2 - y_aruco_3)

        if pixel_distance_x == 0 or pixel_distance_y == 0:
            # Handle the case where division by zero would occur
            return (None, None, None, None, None, None, None, None, None, None, None, None, None, None)

        mm_nbr_pixel_x = float(pixel_distance_x) / DISTANCE_COIN_ARUCO_X_MM
        pixel_nbr_mm_x = 1 / mm_nbr_pixel_x if mm_nbr_pixel_x else None
        mm_nbr_pixel_y = float(pixel_distance_y) / DISTANCE_COIN_Y_MM
        pixel_nbr_mm_y = 1 / mm_nbr_pixel_y if mm_nbr_pixel_y else None
    else:
        # If we can't calculate distances because markers are not detected, return Nones or zeros
        return (None, None, None, None, None, None, None, None, None, None, None, None, None, None)

    return pixel_distance_x, mm_nbr_pixel_x, pixel_nbr_mm_x, pixel_distance_y, mm_nbr_pixel_y, pixel_nbr_mm_y, x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3


def coordrobot(corners, ids):
    x_robot = y_robot = None  # Initialize with None to handle cases where the marker isn't detected
    corners_robot = None  # Initialisation à None pour les coins
    if len(corners) < 1:
        return None, None, None  # Aucun coin détecté, retourne None pour le centre et les coins

    index_robot = np.where(ids == 137)[0]
    if index_robot.size > 0:
        # Récupération des coins du marqueur ArUco
        marker_corners = corners[index_robot[0]][0]
        x_robot = np.mean(marker_corners[:, 0])  # Calcul du centre x
        y_robot = np.mean(marker_corners[:, 1])  # Calcul du centre y
        corners_robot = marker_corners  # Stockage des coins

    return x_robot, y_robot, corners_robot


def aruco_display(corners, ids, image):
    if len(corners) > 0:
        ids = ids.flatten()

        for (markerCorner, markerID) in zip(corners, ids):
            corners = markerCorner.reshape((4, 2))

            (topLeft, topRight, bottomRight, bottomLeft) = corners

            topRight = (int(topRight[0]), int(topRight[1]))
            bottomRight = (int(bottomRight[0]), int(bottomRight[1]))
            bottomLeft = (int(bottomLeft[0]), int(bottomLeft[1]))
            topLeft = (int(topLeft[0]), int(topLeft[1]))

            cv2.line(image, topLeft, topRight, (0, 255, 0), 2)
            cv2.line(image, topRight, bottomRight, (0, 255, 0), 2)
            cv2.line(image, bottomRight, bottomLeft, (0, 255, 0), 2)
            cv2.line(image, bottomLeft, topLeft, (0, 255, 0), 2)

            cX = int((topLeft[0] + bottomRight[0]) / 2.0)
            cY = int((topLeft[1] + bottomRight[1]) / 2.0)

            # Map ArUco marker coordinates to game card coordinates
            if markerID == 0:
                mapped_coordinates = (topLeft[0], topLeft[1])
                cv2.circle(image, mapped_coordinates, 4, (0, 0, 255), -1)
            elif markerID == 1:
                mapped_coordinates = (topRight[0], topRight[1])
                cv2.circle(image, mapped_coordinates, 4, (0, 0, 255), -1)
            elif markerID == 2:
                mapped_coordinates = (bottomRight[0], bottomRight[1])
                cv2.circle(image, mapped_coordinates, 4, (0, 0, 255), -1)
            elif markerID == 3:
                mapped_coordinates = (bottomLeft[0], bottomLeft[1])
                cv2.circle(image, mapped_coordinates, 4, (0, 0, 255), -1)
            else:
                mapped_coordinates = (cX, cY)
                cv2.circle(image, (cX, cY), 4, (0, 0, 255), -1)

            cv2.putText(image, "ID: {}".format(markerID), (topLeft[0], topLeft[1] - 10), cv2.FONT_HERSHEY_SIMPLEX,
                        0.5, (0, 255, 0), 2)

            # Display mapped coordinates on the image
            cv2.putText(image, "Mapped: ({},{})".format(mapped_coordinates[0], mapped_coordinates[1]),
                        (topLeft[0], topLeft[1] - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Print mapped coordinates in the console
            if DEBUG:
                print("[Inference] ArUco marker ID: {}, Mapped Coordinates: {}".format(markerID, mapped_coordinates))

    return image


def cercle_calib(x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3, mm_nbr_pixel_x,
                 mm_nbr_pixel_y, image):
    if mm_nbr_pixel_x is not None and mm_nbr_pixel_y is not None:

        # Dessin calib blanc jaune cyan vert magenta rouge bleu
        for i in range(1, 8):
            cv2.circle(image, (
                int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + i * LONGUEUR_CALIBRATION * mm_nbr_pixel_x),
                int(y_aruco_3)), 6,
                       (255, 255, 255), 1)  # -1 pour remplir le cercle

        # Dessin calib des blancs
        for i in range(1, 11):
            cv2.circle(image, (
                int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - i * LONGUEUR_CALIBRATION * mm_nbr_pixel_x),
                int(y_aruco_1)), 6,
                       (255, 255, 255), 1)  # -1 pour remplir le cercle

    return image


def recup_mask_hsv(img, img_hsv, coordblanc, coordcyan, coordrouge, coordgris):
    kernel = np.ones((7, 7), np.uint8)
    kernel_12 = np.ones((12, 12), np.uint8)
    kernel_14 = np.ones((14, 14), np.uint8)
    kernel_17 = np.ones((17, 17), np.uint8)
    # gris = 14,14 et autre = 17,17

    # Blanc
    circle_mask = np.zeros_like(img_hsv[:, :, 0], dtype=np.uint8)
    cv2.circle(circle_mask, coordblanc, 2, 255, -1)
    mean_hsv_blanc = cv2.mean(img_hsv, mask=circle_mask)[:3]

    bound_lower = np.array([0, 0, mean_hsv_blanc[2] - 10])
    bound_upper = np.array([mean_hsv_blanc[0] + 10, mean_hsv_blanc[1] + 20, 255])
    mask_blanc = cv2.inRange(img_hsv, bound_lower, bound_upper)

    mask_blanc = cv2.morphologyEx(mask_blanc, cv2.MORPH_CLOSE, kernel)
    mask_blanc = cv2.morphologyEx(mask_blanc, cv2.MORPH_OPEN, kernel)
    mask_blanc = cv2.bitwise_and(img, img, mask=mask_blanc)

    # Cyan
    circle_mask = np.zeros_like(img_hsv[:, :, 0], dtype=np.uint8)
    cv2.circle(circle_mask, coordcyan, 2, 255, -1)
    mean_hsv_cyan = cv2.mean(img_hsv, mask=circle_mask)[:3]

    bound_lower = np.array([mean_hsv_cyan[0] - 8, mean_hsv_cyan[1] - 30, mean_hsv_cyan[2] - 40])
    bound_upper = np.array([mean_hsv_cyan[0] + 8, 255, 255])
    mask_cyan = cv2.inRange(img_hsv, bound_lower, bound_upper)

    mask_cyan = cv2.morphologyEx(mask_cyan, cv2.MORPH_CLOSE, kernel_17)
    mask_cyan = cv2.morphologyEx(mask_cyan, cv2.MORPH_OPEN, kernel_17)
    mask_cyan = cv2.bitwise_and(img, img, mask=mask_cyan)

    # Rouge
    circle_mask = np.zeros_like(img_hsv[:, :, 0], dtype=np.uint8)
    cv2.circle(circle_mask, coordrouge, 2, 255, -1)
    mean_hsv_rouge = cv2.mean(img_hsv, mask=circle_mask)[:3]

    bound_lower = np.array([mean_hsv_rouge[0] - 8, mean_hsv_rouge[1] - 100, mean_hsv_rouge[2] - 100])
    bound_upper = np.array([mean_hsv_rouge[0] + 8, 255, 255])
    mask_rouge = cv2.inRange(img_hsv, bound_lower, bound_upper)

    mask_rouge = cv2.morphologyEx(mask_rouge, cv2.MORPH_CLOSE, kernel)
    mask_rouge = cv2.morphologyEx(mask_rouge, cv2.MORPH_OPEN, kernel)
    mask_rouge = cv2.bitwise_and(img, img, mask=mask_rouge)

    # Gris
    circle_mask = np.zeros_like(img[:, :, 0], dtype=np.uint8)
    cv2.circle(circle_mask, coordgris, 2, 255, -1)
    mean_bgr_gris = cv2.mean(img, mask=circle_mask)[:3]

    bound_lower = np.array([0, mean_bgr_gris[1] - 200, mean_bgr_gris[2] - 200])
    bound_upper = np.array([mean_bgr_gris[0] + 40, mean_bgr_gris[1] + 40, mean_bgr_gris[2] + 40])
    mask_gris = cv2.inRange(img, bound_lower, bound_upper)

    mask_gris = cv2.morphologyEx(mask_gris, cv2.MORPH_CLOSE, kernel_14)
    mask_gris = cv2.morphologyEx(mask_gris, cv2.MORPH_OPEN, kernel_14)
    mask_gris = cv2.bitwise_and(img, img, mask=mask_gris)

    # Print the mean values
    if DEBUG:
        print(f"Circle Blanc: Mean HSV = {mean_hsv_blanc[0]} {mean_hsv_blanc[1]} {mean_hsv_blanc[2]}")
        print(f"Circle Cyan: Mean HSV = {mean_hsv_cyan[0]} {mean_hsv_cyan[1]} {mean_hsv_cyan[2]}")
        print(f"Circle Rouge: Mean HSV = {mean_hsv_rouge[0]} {mean_hsv_rouge[1]} {mean_hsv_rouge[2]}")
        print(f"Circle Gris: Mean BGR = {mean_bgr_gris[0]} {mean_bgr_gris[1]} {mean_bgr_gris[2]}")

    return mean_hsv_blanc, mask_blanc, mean_hsv_cyan, mask_cyan, mean_hsv_rouge, mask_rouge, mean_bgr_gris, mask_gris


def draw_grid(image, QUAD_RES, thickness, aruco_corners, mask_blanc, mask_cyan, mask_rouge, mask_gris):
    h, w, _ = image.shape
    blanc_cubes_coords = []  # Liste pour stocker les coordonnées des cubes blancs
    cyan_cubes_coords = []  # Liste pour stocker les coordonnées des cubes cyans
    rouge_cubes_coords = []  # Liste pour stocker les coordonnées des cubes rouges
    gris_cubes_coords = []  # Liste pour stocker les coordonnées des cubes gris

    for i in range(0, h, QUAD_RES):
        for j in range(0, w, QUAD_RES):
            top_left = (j, i)
            bottom_right = (j + QUAD_RES, i + QUAD_RES)
            filled = False

            # Vérifier la présence d'ArUco dans cette cellule
            for id_, corners in aruco_corners.items():
                aruco_top_left = (np.min(corners[:, 0]), np.min(corners[:, 1]))
                aruco_bottom_right = (np.max(corners[:, 0]), np.max(corners[:, 1]))

                if (aruco_top_left[0] < bottom_right[0] and aruco_bottom_right[0] > top_left[0] and
                        aruco_top_left[1] < bottom_right[1] and aruco_bottom_right[1] > top_left[1]):
                    cv2.rectangle(image, top_left, bottom_right, (255, 120, 120), -1)  # ArUco color
                    filled = True
                    break

            # Vérifier les zones d'arrivée
            if not filled:
                for (coords, arrival_color) in ARRIV_COORDS:
                    (x1, y1, x2, y2) = coords
                    if not (bottom_right[0] <= x1 or top_left[0] >= x2 or bottom_right[1] <= y1 or top_left[1] >= y2):
                        cv2.rectangle(image, top_left, bottom_right, arrival_color, 2)
                        filled = True
                        break

            # Dessiner les bords du quadrillage en noir si la cellule est sur les bords extérieurs de l'image
            if not filled and (i == 0 or i + QUAD_RES >= h or j == 0 or j + QUAD_RES >= w):
                cv2.rectangle(image, top_left, bottom_right, (0, 0, 0), -1)  # Bord noir
                filled = True

            # Dessiner les bords du quadrillage en noir si la cellule est sur les arucos de coin
            if (not filled and (i <= 3 * QUAD_RES and j <= 4 * QUAD_RES) or
                    (i <= 3 * QUAD_RES and j >= w - 4 * QUAD_RES) or
                    (i >= h - 3 * QUAD_RES and j <= 4 * QUAD_RES) or
                    (i >= h - 3 * QUAD_RES and j >= w - 4 * QUAD_RES)):
                cv2.rectangle(image, top_left, bottom_right, (0, 0, 0), -1)  # Bord noir
                filled = True

            # Détecter la présence de cube de couleurs dans la cellule
            if not filled:

                cell_mask_blanc = mask_blanc[i:i + QUAD_RES, j:j + QUAD_RES]
                if cv2.countNonZero(cell_mask_blanc) > 0:
                    cv2.rectangle(image, top_left, bottom_right, (255, 255, 255), -1)  # blanc color
                    filled = True
                    blanc_cubes_coords.append((top_left, bottom_right))  # Enregistrer les coordonnées

                cell_mask_cyan = mask_cyan[i:i + QUAD_RES, j:j + QUAD_RES]
                if cv2.countNonZero(cell_mask_cyan) > 0:
                    cv2.rectangle(image, top_left, bottom_right, (255, 0, 0), -1)  # cyan color
                    filled = True
                    cyan_cubes_coords.append((top_left, bottom_right))  # Enregistrer les coordonnées

                cell_mask_rouge = mask_rouge[i:i + QUAD_RES, j:j + QUAD_RES]
                if cv2.countNonZero(cell_mask_rouge) > 0:
                    cv2.rectangle(image, top_left, bottom_right, (0, 0, 255), -1)  # Rouge color
                    filled = True
                    rouge_cubes_coords.append((top_left, bottom_right))  # Enregistrer les coordonnées

                cell_mask_gris = mask_gris[i:i + QUAD_RES, j:j + QUAD_RES]
                if cv2.countNonZero(cell_mask_gris) > 0:
                    cv2.rectangle(image, top_left, bottom_right, (0, 0, 0), -1)  # Gris color
                    filled = True
                    gris_cubes_coords.append((top_left, bottom_right))  # Enregistrer les coordonnées

            # Dessiner les lignes de quadrillage si la cellule n'est pas remplie
            if not filled:
                cv2.rectangle(image, top_left, bottom_right, (0, 0, 0), thickness)  # Lignes de quadrillage

    return image, blanc_cubes_coords, cyan_cubes_coords, rouge_cubes_coords, gris_cubes_coords  # Retourner l'image et les coordonnées des cubes

class Case:
    def __init__(self, position, categorie, couleur, voisins, row, col, width, total_rows):
        self.position = position  # tuple (top_left, bottom_right)
        self.categorie = categorie  # 'bordure', 'cube', 'zone d'arrivée', 'vide'
        self.couleur = couleur  # 'blanc', 'cyan', 'rouge', 'gris', None
        self.voisins = voisins  # Liste des cases voisines
        self.row = row
        self.col = col
        self.x = row * width
        self.y = col * width
        self.width = width
        self.total_rows = total_rows
        self.neighbors = []
        self.color = WHITE
        if self.categorie == 'obstacle':
            self.color = BLACK

    def get_pos(self):
        return self.row, self.col

    def is_closed(self):
        return self.color == RED

    def is_open(self):
        return self.color == GREEN

    def is_barrier(self):
        return self.color == BLACK

    def is_start(self):
        return self.color == ORANGE

    def is_end(self):
        return self.color == TURQUOISE

    def reset(self):
        self.color = WHITE

    def make_start(self):
        self.color = ORANGE

    def make_closed(self):
        self.color = RED

    def make_open(self):
        self.color = GREEN

    def make_barrier(self):
        self.color = BLACK

    def make_end(self):
        self.color = TURQUOISE

    def make_path(self):
        self.color = PURPLE

    def draw(self, image):
        top_left = (self.y, self.x)
        bottom_right = (self.y + self.width, self.x + self.width)
        cv2.rectangle(image, top_left, bottom_right, self.color, -1)

    def update_neighbors(self, grid):
        self.neighbors = []
        if self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_barrier():  # DOWN
            self.neighbors.append(grid[self.row + 1][self.col])
        if self.row > 0 and not grid[self.row - 1][self.col].is_barrier():  # UP
            self.neighbors.append(grid[self.row - 1][self.col])
        if self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_barrier():  # RIGHT
            self.neighbors.append(grid[self.row][self.col + 1])
        if self.col > 0 and not grid[self.row][self.col - 1].is_barrier():  # LEFT
            self.neighbors.append(grid[self.row][self.col - 1])

    def __lt__(self, other):
        return False

def process_grid(image, mm_nbr_pixel_x, mm_nbr_pixel_y, aruco_corners, mask_blanc, mask_cyan, mask_rouge, mask_gris):
    h, w, _ = image.shape
    cases = []  # Liste pour stocker les objets Case

    for i in range(0, h, QUAD_RES):
        row = []  # rangées
        for j in range(0, w, QUAD_RES):
            top_left = (j, i)
            bottom_right = (j + QUAD_RES, i + QUAD_RES)
            categorie = 'vide'
            couleur = None

            # Bordures
            if (i < 50 * mm_nbr_pixel_y) or (i + QUAD_RES > h - 50 * mm_nbr_pixel_y) or \
                    (j < 50 * mm_nbr_pixel_x) or (j + QUAD_RES > w - 50 * mm_nbr_pixel_x):
                categorie = 'bordure'  # bordure general
            if (i < 150 * mm_nbr_pixel_y and j < 150 * mm_nbr_pixel_x) or \
                    (i < 150 * mm_nbr_pixel_y and j > w - 175 * mm_nbr_pixel_x) or \
                    (i > h - 200 * mm_nbr_pixel_y and j < 150 * mm_nbr_pixel_x) or \
                    (i > h - 200 * mm_nbr_pixel_y and j > w - 175 * mm_nbr_pixel_x):
                categorie = 'bordure'  # bordure arucos

            # Détection des ArUco
            for id_, corners in aruco_corners.items():
                aruco_top_left = (np.min(corners[:, 0]), np.min(corners[:, 1]))
                aruco_bottom_right = (np.max(corners[:, 0]), np.max(corners[:, 1]))
                if (aruco_top_left[0] < bottom_right[0] and aruco_bottom_right[0] > top_left[0] and
                        aruco_top_left[1] < bottom_right[1] and aruco_bottom_right[1] > top_left[1]):
                    categorie = 'aruco'
                    break

            # Zones d'arrivée
            if categorie == 'vide':
                for (coords, arrival_color, color) in ARRIV_COORDS:
                    (x1, y1, x2, y2) = coords
                    if not (bottom_right[0] <= x1 or top_left[0] >= x2 or bottom_right[1] <= y1 or top_left[1] >= y2):
                        categorie = 'zonedepot'
                        couleur = color
                        break

            # Détection des cubes
            if categorie == 'vide':
                masks = {'blanc': mask_blanc, 'cyan': mask_cyan, 'rouge': mask_rouge, 'gris': mask_gris}
                for clr, mask in masks.items():
                    cell_mask = mask[i:i + QUAD_RES, j:j + QUAD_RES]
                    if cv2.countNonZero(cell_mask) > 0:
                        if clr == 'gris':
                            categorie = 'obstacle'
                        else:
                            categorie = 'cube'
                            couleur = clr
                        break

            # Création de l'objet Case
            new_case = Case((top_left, bottom_right), categorie, couleur, [], i // QUAD_RES, j // QUAD_RES, QUAD_RES,
                            h // QUAD_RES)

            row.append(new_case)
        cases.append(row)

    # Ajout de la logique pour détecter les obstacles avec la nouvelle condition
    for i in range(len(cases)):
        for j in range(len(cases[i])):
            if cases[i][j].categorie == 'obstacle':
                left_case = cases[i][j - 1] if j > 0 else None
                top_case = cases[i - 1][j] if i > 0 else None
                if left_case and top_case and ((left_case.categorie == 'cube') or (top_case.categorie == 'cube')):
                    cases[i][j].categorie = 'vide'
                    if DEBUG:
                        print("case", i, j, "remove obstacle collé")

    # Dessinnnnn
    for i in range(len(cases)):
        for j in range(len(cases[i])):

            if cases[i][j].categorie == 'vide':
                cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (255, 255, 255), 1)

            if cases[i][j].categorie == 'bordure':
                cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (0, 0, 0), 1)

            elif cases[i][j].categorie == 'aruco':
                cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (255, 120, 120), -1)

            elif cases[i][j].categorie == 'obstacle':
                cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (30, 30, 30), -1)

            elif cases[i][j].categorie == 'zonedepot':
                if cases[i][j].couleur == 'jaune':
                    cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (0, 255, 255), 2)
                elif cases[i][j].couleur == 'magenta':
                    cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (255, 0, 255), 2)
                elif cases[i][j].couleur == 'bleu':
                    cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (255, 0, 0), 2)
                elif cases[i][j].couleur == 'vert':
                    cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (0, 255, 0), 2)

            elif cases[i][j].categorie == 'cube':
                if cases[i][j].couleur == 'blanc':
                    cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (255, 255, 255), -1)
                elif cases[i][j].couleur == 'cyan':
                    cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (255, 255, 0), -1)
                elif cases[i][j].couleur == 'rouge':
                    cv2.rectangle(image, cases[i][j].position[0], cases[i][j].position[1], (0, 0, 255), -1)

    # Calcul des voisins pour chaque case
    for i in range(len(cases)):
        for j in range(len(cases[i])):
            voisins = []
            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Haut, bas, gauche, droite
            for di, dj in directions:
                ni, nj = i + di, j + dj
                if 0 <= ni < len(cases) and 0 <= nj < len(cases[0]):
                    voisins.append(cases[ni][nj])
            cases[i][j].voisins = voisins

    return image, cases


def find_centers(cubes):
    """ Convert corner coordinates to center coordinates. """
    return [(int((x1 + x2) / 2), int((y1 + y2) / 2)) for (x1, y1), (x2, y2) in cubes]


def are_adjacent(c1, c2):
    """ Check if centers are adjacent considering each square has a side of 20 units. """
    x1, y1 = c1
    x2, y2 = c2
    return abs(x1 - x2) <= QUAD_RES and abs(y1 - y2) <= QUAD_RES


def find_group(c, groups):
    """ Find which group a coordinate belongs to. """
    for i, group in enumerate(groups):
        if any(are_adjacent(c, member) for member in group):
            return i
    return None


def group_cubes(centers):
    """ Group cubes that are adjacent into single representative groups. """
    groups = []
    representatives = []
    for center in centers:
        group_index = find_group(center, groups)
        if group_index is not None:
            groups[group_index].add(center)
        else:
            groups.append({center})

    for group in groups:
        liste_x = []
        liste_y = []
        # print("group:", group)
        for (x, y) in group:
            liste_x.append(x)
            liste_y.append(y)

        # Calcul des valeurs minimales et maximales pour x et y
        min_x = min(liste_x)
        max_x = max(liste_x)
        min_y = min(liste_y)
        max_y = max(liste_y)
        # Affichage des résultats
        # print(f"Min X: {min_x}, Max X: {max_x}")
        # print(f"Min Y: {min_y}, Max Y: {max_y}")
        coordrepresentatives = (int((max_x + min_x) / 2), int((max_y + min_y) / 2))
        # print("coordrepresentatives:", coordrepresentatives)
        representatives.append(coordrepresentatives)

    # Select one representative from each group
    # print("representatives:", representatives)
    return representatives


def calculate_distance(p1, p2):
    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)


def find_nearest(current_position, centers):
    """Trouve le centre le plus proche de la position actuelle."""
    min_distance = float('inf')
    nearest_center = None
    for center in centers:
        distance = calculate_distance(current_position, center)
        if distance < min_distance:
            min_distance = distance
            nearest_center = center
    return nearest_center


def create_path(start_position, centers):
    """Crée un chemin pour toucher tous les centres en commençant par start_position."""
    path = []
    remaining_centers = centers.copy()
    current_position = start_position

    while remaining_centers:
        nearest_center = find_nearest(current_position, remaining_centers)
        path.append(nearest_center)
        remaining_centers.remove(nearest_center)
        current_position = nearest_center

    return path


def FS1(img):
    h, w, _ = img.shape
    print("Lecture d'image réussie. Shape: {}".format((h, w)))

    width = IMAGE_LONGUEUR
    height = IMAGE_LARGEUR
    img = cv2.resize(img, (width, height), interpolation=cv2.INTER_CUBIC)
    img = cv2.rotate(img, cv2.ROTATE_180)

    # -------------------------------RECUPERATION PREMIERE IMAGE ET DETECTION DES COINS----------------------------------

    detector = cv2.aruco.ArucoDetector(arucoDict, arucoParams)
    corners, ids, rejected = detector.detectMarkers(img)
    x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3 = trouver_arucos_coins(
        corners, ids)

    # ----------------------------------------------RECADREMENT DE L'IMAGE----------------------------------------------

    pts1 = np.float32([[x_aruco_0 - CONSTANTE_RECADRAGE, y_aruco_0 - CONSTANTE_RECADRAGE],
                       [x_aruco_1 + CONSTANTE_RECADRAGE, y_aruco_1 - CONSTANTE_RECADRAGE],
                       [x_aruco_3 - CONSTANTE_RECADRAGE, y_aruco_3 + CONSTANTE_RECADRAGE],
                       [x_aruco_2 + CONSTANTE_RECADRAGE, y_aruco_2 + CONSTANTE_RECADRAGE]])
    pts2 = np.float32([[0, 0], [IMAGE_RECADRE_LONGUEUR, 0], [0, IMAGE_RECADRE_LARGEUR],
                       [IMAGE_RECADRE_LONGUEUR, IMAGE_RECADRE_LARGEUR]])

    M = cv2.getPerspectiveTransform(pts1, pts2)
    img_recadre = cv2.warpPerspective(img, M, (IMAGE_RECADRE_LONGUEUR, IMAGE_RECADRE_LARGEUR))

    # Copie de l'image recadré pour y afficher des infos dessus
    img_recadre_copy = img_recadre.copy()

    # ---------------------------------DETECTION ARUCOS COIN ET ROBOT IMAGE RECADRE------------------------------------

    # Recuperation des arucos
    corners_recadre, ids_recadre, rejected = detector.detectMarkers(img_recadre)

    # Affichage des arucos
    img_recadre_copy = aruco_display(corners_recadre, ids_recadre, img_recadre_copy)

    # Recuperations des coordonnées des arucos de coins
    x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3 = trouver_arucos_coins(
        corners_recadre, ids_recadre)

    # Calcul de conversion pixel/mm et autre
    # pixel/mm =  mm_nbr_pixel      et mm/pixel = pixel_nbr_mm
    pixel_distance_x, mm_nbr_pixel_x, pixel_nbr_mm_x, pixel_distance_y, mm_nbr_pixel_y, pixel_nbr_mm_y = calcul_pixel_mm(
        x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3)

    # ---------------------------------DETECTIONS DES COULEURS------------------------------------

    # Coordonnées des couleurs de calibrations nous intéressant
    pixel_blanc = (
        int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 1 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3))
    pixel_cyan = (
        int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 3 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3))
    pixel_rouge = (
        int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 5 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3))
    pixel_gris = (
        int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 7 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1))

    # Affichage de cercle pour check si bons endroits
    cv2.circle(img_recadre_copy, pixel_blanc, 8, (255, 255, 255), 1)
    cv2.circle(img_recadre_copy, pixel_cyan, 8, (255, 255, 255), 1)
    cv2.circle(img_recadre_copy, pixel_rouge, 8, (255, 255, 255), 1)
    cv2.circle(img_recadre_copy, pixel_gris, 8, (255, 255, 255), 1)

    return img_recadre, img_recadre_copy, mm_nbr_pixel_x, pixel_nbr_mm_x, mm_nbr_pixel_y, pixel_nbr_mm_y, pixel_blanc, pixel_cyan, pixel_rouge, pixel_gris

def FS2(img_recadre, img_recadre_copy, pixel_blanc, pixel_cyan, pixel_rouge, pixel_gris):
    # Image en HSV pour y afficher des infos
    img_recadre_hsv = cv2.cvtColor(img_recadre, cv2.COLOR_BGR2HSV)
    # Copie de l'image recadré HSV pour y afficher des infos dessus
    img_recadre_hsv_copy = img_recadre_hsv.copy()

    # Recup les valeurs et les mask de chaque couleurs
    mean_hsv_blanc, mask_blanc, mean_hsv_cyan, mask_cyan, mean_hsv_rouge, mask_rouge, mean_bgr_gris, mask_gris = recup_mask_hsv(
        img_recadre, img_recadre_hsv, pixel_blanc, pixel_cyan, pixel_rouge, pixel_gris)

    # Affichage de cercles HSV pour check si bonne couleurs
    cv2.circle(img_recadre_hsv_copy, (pixel_blanc[0], pixel_blanc[1] - 20), 10,
               (mean_hsv_blanc[0], mean_hsv_blanc[1], mean_hsv_blanc[2]), -1)
    cv2.circle(img_recadre_hsv_copy, (pixel_blanc[0], pixel_blanc[1] - 20), 10, (0, 0, 0), 1)
    cv2.circle(img_recadre_hsv_copy, (pixel_cyan[0], pixel_cyan[1] - 20), 10,
               (mean_hsv_cyan[0], mean_hsv_cyan[1], mean_hsv_cyan[2]), -1)
    cv2.circle(img_recadre_hsv_copy, (pixel_cyan[0], pixel_cyan[1] - 20), 10, (0, 0, 0), 1)
    cv2.circle(img_recadre_hsv_copy, (pixel_rouge[0], pixel_rouge[1] - 20), 10,
               (mean_hsv_rouge[0], mean_hsv_rouge[1], mean_hsv_rouge[2]), -1)
    cv2.circle(img_recadre_hsv_copy, (pixel_rouge[0], pixel_rouge[1] - 20), 10, (0, 0, 0), 1)
    # Affichage du cercle BGR pour check si bonne couleur
    cv2.circle(img_recadre_copy, (pixel_gris[0], pixel_gris[1] + 20), 10,
               (mean_bgr_gris[0], mean_bgr_gris[1], mean_bgr_gris[2]), -1)
    cv2.circle(img_recadre_copy, (pixel_gris[0], pixel_gris[1] + 20), 10, (0, 0, 0), 1)

    top_row = cv2.hconcat([mask_blanc, mask_cyan])
    bottom_row = cv2.hconcat([mask_rouge, mask_gris])
    all_mask_hsv = cv2.vconcat([top_row, bottom_row])
    all_mask_hsv = cv2.resize(all_mask_hsv, (IMAGE_RECADRE_LONGUEUR, IMAGE_RECADRE_LARGEUR),
                              interpolation=cv2.INTER_CUBIC)

    print("")
    print("----------------------------------------------------------------------------------------------------------")
    print("")

    # --------------------------------- QUADRILLAGE ------------------------------------

    # Initialisation des coins ArUco, à ajuster selon votre application
    aruco_corners = {}

    # Conversion des masques en niveaux de gris si nécessaire
    mask_blanc = cv2.cvtColor(mask_blanc, cv2.COLOR_BGR2GRAY) if len(mask_blanc.shape) > 2 else mask_blanc
    mask_cyan = cv2.cvtColor(mask_cyan, cv2.COLOR_BGR2GRAY) if len(mask_cyan.shape) > 2 else mask_cyan
    mask_rouge = cv2.cvtColor(mask_rouge, cv2.COLOR_BGR2GRAY) if len(mask_rouge.shape) > 2 else mask_rouge
    mask_gris = cv2.cvtColor(mask_gris, cv2.COLOR_BGR2GRAY) if len(mask_gris.shape) > 2 else mask_gris

    img_with_grid = img_recadre.copy()
    # Appel à la nouvelle fonction de traitement
    img_with_grid, cases = process_grid(img_with_grid, mm_nbr_pixel_x, mm_nbr_pixel_y, aruco_corners,
                                        mask_blanc, mask_cyan, mask_rouge, mask_gris)

    # Extraction et affichage des coordonnées des cubes par couleur
    cubes_blanc = [case.position for row in cases for case in row if
                   case.categorie == 'cube' and case.couleur == 'blanc']
    cubes_cyan = [case.position for row in cases for case in row if case.categorie == 'cube' and case.couleur == 'cyan']
    cubes_rouge = [case.position for row in cases for case in row if
                   case.categorie == 'cube' and case.couleur == 'rouge']
    cubes_gris = [case.position for row in cases for case in row if case.categorie == 'obstacle']

    # Rassemblage des cubes de memes couleurs et centre des groupages
    cubes_blanc_centre = find_centers(cubes_blanc)
    unique_representatives_blanc = group_cubes(cubes_blanc_centre)
    cubes_cyan_centre = find_centers(cubes_cyan)
    unique_representatives_cyan = group_cubes(cubes_cyan_centre)
    cubes_rouge_centre = find_centers(cubes_rouge)
    unique_representatives_rouge = group_cubes(cubes_rouge_centre)
    cubes_gris_centre = find_centers(cubes_gris)
    unique_representatives_gris = group_cubes(cubes_gris_centre)

    # Afficher les cercles de centres
    for centres_blanc in unique_representatives_blanc:
        cv2.circle(img_with_grid, (centres_blanc[0], centres_blanc[1]), 3, (0, 0, 0), 1)
    for centres_cyan in unique_representatives_cyan:
        cv2.circle(img_with_grid, (centres_cyan[0], centres_cyan[1]), 3, (0, 0, 0), 1)
    for centres_rouge in unique_representatives_rouge:
        cv2.circle(img_with_grid, (centres_rouge[0], centres_rouge[1]), 3, (0, 0, 0), 1)
    for centres_gris in unique_representatives_gris:
        cv2.circle(img_with_grid, (centres_gris[0], centres_gris[1]), 3, (255, 255, 255), 1)

    return all_mask_hsv, img_with_grid, unique_representatives_blanc, unique_representatives_cyan, unique_representatives_rouge, unique_representatives_gris, cases

    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------LANCEMENT DU CODE CI-DESSOUS--------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------


def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])


def a_star(grid, start, end):
    open_set = []
    heapq.heappush(open_set, (0, start))
    came_from = {}
    g_score = {case.get_pos(): float('inf') for row in grid for case in row}
    g_score[start] = 0
    f_score = {case.get_pos(): float('inf') for row in grid for case in row}
    f_score[start] = heuristic(start, end)

    while open_set:
        current = heapq.heappop(open_set)[1]

        if current == end:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)  # Optionally: add start point to path
            path.reverse()
            return path

        current_case = grid[current[0]][current[1]]
        for neighbor in current_case.neighbors:
            neighbor_pos = neighbor.get_pos()
            tentative_g_score = g_score[current] + 1

            if tentative_g_score < g_score[neighbor_pos]:
                came_from[neighbor_pos] = current
                g_score[neighbor_pos] = tentative_g_score
                f_score[neighbor_pos] = tentative_g_score + heuristic(neighbor_pos, end)
                if neighbor_pos not in [i[1] for i in open_set]:
                    heapq.heappush(open_set, (f_score[neighbor_pos], neighbor_pos))

    return []  # Return an empty path if there's no path


def FS3(cases, coordonné_arruco, path):
    start = (coordonné_arruco[1] // QUAD_RES, coordonné_arruco[0] // QUAD_RES)
    end = (path[0][1] // QUAD_RES, path[0][0] // QUAD_RES)

    # Assurez-vous que les voisins sont mis à jour pour chaque cellule
    for row in cases:
        for case in row:
            case.update_neighbors(cases)

    # Exécutez l'algorithme A* pour trouver le chemin
    route = a_star(cases, start, end)

    if not route:
        print("Aucun chemin trouvé.")
    else:
        print("Chemin trouvé:")
        for step in route:
            print(step)
            cases[step[0]][step[1]].make_path()  # Marquez le chemin dans la grille

    return cases









aruco_type = "DICT_ARUCO_ORIGINAL"
arucoDict = cv2.aruco.getPredefinedDictionary(ARUCO_DICT[aruco_type])
arucoParams = cv2.aruco.DetectorParameters()

if TEST != 1:
    cap = cv2.VideoCapture("./Videos/salle1.mp4")
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, IMAGE_LONGUEUR)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, IMAGE_LARGEUR)

if TEST == 2:
    cap = cv2.VideoCapture("./Videos/salle1.mp4")
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, IMAGE_LONGUEUR)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, IMAGE_LARGEUR)
    ret, frame = cap.read()
    if ret:
        cv2.imwrite('./Images/photo_video.png', frame)
    cap.release()

# cv2.namedWindow("Image recadre")
# cv2.setMouseCallback("Image recadre", mouse_callback)


nomImages = ("./Images/photo_video.png", "./Images/PhotosCarte/salle1.jpg", "./Images/PhotosCarte/salle2.jpg",
             "./Images/PhotosCarte/salle3.jpg", "./Images/PhotosCarte/salle4.jpg", "./Images/PhotosCarte/salle5.jpg",
             "./Images/PhotosCarte/salle6.jpg")
nbImages = len(nomImages)

cpt = 0
comptagemask = 0

img = cv2.imread('./Images/photo_video.png')

# Lancer FS1 et recup img recadre, conversion px/mm et coord des pixels de calibrations
img_recadre, img_recadre_copy, mm_nbr_pixel_x, pixel_nbr_mm_x, mm_nbr_pixel_y, pixel_nbr_mm_y, pixel_blanc, pixel_cyan, pixel_rouge, pixel_gris = FS1(
    img)

print("[Conversion] mm_nbr_pixel_x: {:.2f}, pixel_nbr_mm_x: {:.2f}".format(mm_nbr_pixel_x, pixel_nbr_mm_x))
print("[Conversion] mm_nbr_pixel_y: {:.2f}, pixel_nbr_mm_y: {:.2f}".format(mm_nbr_pixel_y, pixel_nbr_mm_y))

if DEBUG:
    print("[Calibrage] Coord Pixel Blanc:", pixel_blanc)
    print("[Calibrage] Coord Pixel Cyan:", pixel_cyan)
    print("[Calibrage] Coord Pixel Rouge:", pixel_rouge)
    print("[Calibrage] Coord Pixel Gris:", pixel_gris)

# Lancer FS2 et recup les masks, l'image quadrillé et les coord des cubes et obstacles
all_mask_hsv, img_with_grid, unique_representatives_blanc, unique_representatives_cyan, unique_representatives_rouge, unique_representatives_gris, cases = FS2(
    img_recadre, img_recadre_copy, pixel_blanc, pixel_cyan, pixel_rouge, pixel_gris)

print("[Detection] Centres Cubes Blancs : ", unique_representatives_blanc)
print("[Detection] Centres Cubes Cyans : ", unique_representatives_cyan)
print("[Detection] Centres Cubes Rouges : ", unique_representatives_rouge)
print("[Detection] Centres Obstacles : ", unique_representatives_gris)



# coordonnées arruco
coordonné_arruco = (1000, 444)

all_centers_cube = unique_representatives_blanc + unique_representatives_cyan + unique_representatives_rouge

# Générer le chemin sans inclure la position initiale
path = create_path(coordonné_arruco, all_centers_cube)

print("Chemin pour etape robot :")
for step in path:
    print(step)



for i in range(len(cases)):
    for j in range(len(cases[i])):
        cases[i][j].update_neighbors(cases)

# Appelez FS3 avec les cases, coordonné_arruco et le premier élément de la liste path
cases = FS3(cases, coordonné_arruco, path)

# Afficher la grille avec le chemin trouvé
img_with_path = img_with_grid.copy()
for row in cases:
    for case in row:
        case.draw(img_with_path)

cv2.imshow("Image avec chemin", img_with_path)


while True:
    if DEBUG:
        cv2.imshow("img_recadre", img_recadre)
        cv2.imshow("img_recadre_copy", img_recadre_copy)
        cv2.imshow("Masks", all_mask_hsv)
        cv2.imshow("Image quadrillee", img_with_grid)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

if TEST == 0:
    cap.release()

cv2.destroyAllWindows()
