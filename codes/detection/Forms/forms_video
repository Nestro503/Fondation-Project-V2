import cv2
import numpy as np

# Capturer la vidéo depuis la caméra par défaut
cap = cv2.VideoCapture(0)

while True:
    # Lire une frame depuis la vidéo
    ret, frame = cap.read()

    # Convertir la frame en niveaux de gris
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Appliquer un flou pour réduire le bruit
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Détection des contours avec Canny
    edges = cv2.Canny(blurred, 50, 150)

    # Trouver les contours dans l'image
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Boucle sur les contours détectés
    for contour in contours:
        # Approximer le contour pour obtenir une forme géométrique simple
        epsilon = 0.04 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)

        # Identifier la forme géométrique
        vertices = len(approx)
        if vertices == 3:
            shape = "Triangle"
        elif vertices == 4:
            shape = "Rectangle"
        elif vertices == 5:
            shape = "Pentagon"
        elif vertices == 6:
            shape = "Hexagon"
        else:
            shape = "Circle"

        # Dessiner le contour et afficher la forme
        cv2.drawContours(frame, [approx], 0, (0, 255, 0), 2)
        x, y = approx[0][0]
        cv2.putText(frame, shape, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

    # Afficher la frame résultante
    cv2.imshow('Reconnaissance de formes en temps réel', frame)

    # Sortir de la boucle si la touche 'q' est pressée
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Libérer les ressources
cap.release()
cv2.destroyAllWindows()
