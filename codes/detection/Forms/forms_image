import cv2
import numpy as np

def rgb_to_color_name(rgb):
    color_names = {
        (0, 0, 0): "Noir",
        (255, 255, 255): "Blanc",
        (255, 0, 0): "Rouge",
        (0, 255, 0): "Vert",
        (0, 0, 255): "Bleu",
        # Ajoutez d'autres correspondances de couleur au besoin
    }
    return color_names.get(rgb, "Couleur inconnue")

# Charger l'image
image = cv2.imread('Images/forms2.jpg')

# Redimensionner l'image à la taille spécifiée (H=1000, W=2000)
new_size = (900, 900)
resized_image = cv2.resize(image, new_size)

# Convertir l'image redimensionnée en niveaux de gris
gray = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

# Appliquer un flou pour réduire le bruit
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Détection des contours avec Canny
edges = cv2.Canny(blurred, 50, 150)

# Trouver les contours dans l'image
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Boucle sur les contours détectés
for contour in contours:
    # Approximer le contour pour obtenir une forme géométrique simple
    epsilon = 0.04 * cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, epsilon, True)

    # Identifier la forme géométrique
    vertices = len(approx)
    if vertices == 3:
        shape = "Triangle"
    elif vertices == 4:
        shape = "Rectangle"
    elif vertices == 5:
        shape = "Pentagon"
    elif vertices == 6:
        shape = "Hexagon"
    else:
        shape = "Circle"

    # Calculer la couleur moyenne à l'intérieur du contour
    mask = np.zeros_like(gray)
    cv2.drawContours(mask, [approx], 0, 255, thickness=cv2.FILLED)
    mean_color = cv2.mean(resized_image, mask=mask)[:3]

    # Convertir la couleur moyenne en texte
    color_name = rgb_to_color_name(tuple(map(int, mean_color)))

    # Dessiner le contour et afficher la forme, la couleur et le type
    x, y = approx[0][0]
    cv2.putText(resized_image, f"Type: {shape}", (x, y-40), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)
    cv2.putText(resized_image, f"RGB: {tuple(map(int, mean_color))}", (x, y-20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)
    cv2.drawContours(resized_image, [approx], 0, (0, 0, 0), 2)

# Afficher l'image résultante
cv2.imshow('Shape_Recognition', resized_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
