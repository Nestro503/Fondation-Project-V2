import pygame
import sys

RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
PURPLE = (128, 0, 128)
ORANGE = (255, 165, 0)
GREY = (128, 128, 128)
TURQUOISE = (64, 224, 208)


def draw_grid(surface, cell_size, image):
    """
    Dessine un quadrillage sur la surface donnée avec la taille de cellule spécifiée et remplit en vert
    les cellules contenant du noir.

    Args:
    - surface : La surface Pygame sur laquelle dessiner le quadrillage.
    - cell_size : La taille des cellules du quadrillage.
    - image : L'image Pygame à partir de laquelle détecter les couleurs.
    """
    for x in range(0, surface.get_width(), cell_size):
        for y in range(0, surface.get_height(), cell_size):
            # Examine chaque cellule pour détecter la présence de la couleur noire
            cell = pygame.Rect(x, y, cell_size, cell_size)
            # Subsurface pour vérifier les pixels à l'intérieur de la cellule
            subsurface = image.subsurface(cell)
            # Recherche de la couleur noire dans la cellule
            for i in range(0, cell_size):
                for j in range(0, cell_size):
                    if subsurface.get_at((i, j)) == BLACK:
                        # Remplit la cellule en vert si du noir est trouvé
                        pygame.draw.rect(surface, BLACK, cell)
                        break
                    elif subsurface.get_at((i, j)) == RED:
                        pygame.draw.rect(surface, ORANGE, cell)
                        break
                    elif subsurface.get_at((i, j)) == BLUE:
                        pygame.draw.rect(surface, TURQUOISE, cell)
                        break
                else:
                    continue
                break

    # Dessine le quadrillage après avoir rempli les cellules nécessaires
    for x in range(0, surface.get_width(), cell_size):
        pygame.draw.line(surface, BLACK, (x, 0), (x, surface.get_height()))
    for y in range(0, surface.get_height(), cell_size):
        pygame.draw.line(surface, BLACK, (0, y), (surface.get_width(), y))


# Initialise Pygame
pygame.init()

# Charge l'image à afficher
image_path = 'path_planning/img/etienne1.png'  # Remplacez par le chemin réel de votre image
image = pygame.image.load(image_path)
image_size = image.get_size()

# Définit les dimensions de la fenêtre en fonction de la taille de l'image
screen = pygame.display.set_mode(image_size)

# Taille de la cellule du quadrillage (en pixels)
cell_size = 50  # Modifiez cette valeur pour changer la taille des cellules

# Boucle principale
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Affiche l'image
    screen.blit(image, (0, 0))

    # Dessine le quadrillage et remplit les cellules nécessaires
    draw_grid(screen, cell_size, image)

    # Met à jour l'affichage
    pygame.display.flip()

# Termine Pygame
pygame.quit()
sys.exit()