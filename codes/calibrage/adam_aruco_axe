import numpy as np
import time
import cv2

ARUCO_DICT = {
    "DICT_ARUCO_ORIGINAL": cv2.aruco.DICT_ARUCO_ORIGINAL,
}

# Constantes
DISTANCE_COIN_ARUCO_X_MM = 2940
DISTANCE_COIN_Y_MM = 1940

TAILLE_ARUCO_COIN = 100
LONGUEUR_CALIBRATION = 90

IMAGE_LONGUEUR = 1920
IMAGE_LARGEUR = 1080

CONSTANTE_RECADRAGE = 10
IMAGE_RECADRE_LONGUEUR = 1600
IMAGE_RECADRE_LARGEUR = 900

RADIUS_ROBOT = 100




def trouver_arucos_coins(corners, ids):
    # Initialize all variables at the beginning of the function to ensure they have some default value.
    x_aruco_0 = y_aruco_0 = x_aruco_1 = y_aruco_1 = 0
    x_aruco_2 = y_aruco_2 = x_aruco_3 = y_aruco_3 = 0

    # Early return if there are not enough corners to process
    if len(corners) <= 1:
        # Return None or 0 for all values indicating the function cannot proceed with calculations
        return (None, None, None, None, None, None, None, None, None, None, None, None, None, None)

    # Processing starts here because there are more than 1 corner
    index_aruco_0 = np.where(ids == 0)[0]
    index_aruco_1 = np.where(ids == 1)[0]
    index_aruco_2 = np.where(ids == 2)[0]
    index_aruco_3 = np.where(ids == 3)[0]

    if index_aruco_0.size > 0:
        x_aruco_0, y_aruco_0 = corners[index_aruco_0[0]][0][0][0], corners[index_aruco_0[0]][0][0][1]
    if index_aruco_1.size > 0:
        x_aruco_1, y_aruco_1 = corners[index_aruco_1[0]][0][1][0], corners[index_aruco_1[0]][0][1][1]
    if index_aruco_2.size > 0:
        x_aruco_2, y_aruco_2 = corners[index_aruco_2[0]][0][2][0], corners[index_aruco_2[0]][0][2][1]
    if index_aruco_3.size > 0:
        x_aruco_3, y_aruco_3 = corners[index_aruco_3[0]][0][3][0], corners[index_aruco_3[0]][0][3][1]

    return x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3


def calcul_pixel_mm(x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3):
    # Initialize all variables at the beginning of the function to ensure they have some default value.
    pixel_distance_x = pixel_distance_y = 0
    mm_nbr_pixel_x = mm_nbr_pixel_y = pixel_nbr_mm_x = pixel_nbr_mm_y = 0


    # Calculate distances and ratios
    # Ensure there's a check to prevent division by zero
    if x_aruco_2 and x_aruco_3 and y_aruco_2 and y_aruco_3:
        pixel_distance_x = abs((x_aruco_2 - x_aruco_3) + (x_aruco_1 - x_aruco_0))/2
        pixel_distance_y = abs((y_aruco_2 - y_aruco_1) + (y_aruco_3 - y_aruco_0))/2

        print("[Inference] pixel_distance_x: {:.2f}, pixel_distance_y: {:.2f}".format(pixel_distance_x, pixel_distance_y))

        if pixel_distance_x == 0 or pixel_distance_y == 0:
            # Handle the case where division by zero would occur
            return (None, None, None, None, None, None)

        mm_nbr_pixel_x = float(pixel_distance_x) / DISTANCE_COIN_ARUCO_X_MM
        pixel_nbr_mm_x = 1 / mm_nbr_pixel_x if mm_nbr_pixel_x else None
        print("[Inference] mm_nbr_pixel_x: {:.2f}, pixel_nbr_mm_x: {:.2f}".format(mm_nbr_pixel_x, pixel_nbr_mm_x))
        mm_nbr_pixel_y = float(pixel_distance_y) / DISTANCE_COIN_Y_MM
        pixel_nbr_mm_y = 1 / mm_nbr_pixel_y if mm_nbr_pixel_y else None
        print("[Inference] mm_nbr_pixel_y: {:.2f}, pixel_nbr_mm_y: {:.2f}".format(mm_nbr_pixel_y, pixel_nbr_mm_y))

    else:
        # If we can't calculate distances because markers are not detected, return Nones or zeros
        return (None, None, None, None, None, None)

    return pixel_distance_x, mm_nbr_pixel_x, pixel_nbr_mm_x, pixel_distance_y, mm_nbr_pixel_y, pixel_nbr_mm_y


def calculate_pixel_distance(corners, ids):
    # Initialize all variables at the beginning of the function to ensure they have some default value.
    pixel_distance_x = pixel_distance_y = 0
    mm_nbr_pixel_x = mm_nbr_pixel_y = pixel_nbr_mm_x = pixel_nbr_mm_y = 0
    x_aruco_0 = y_aruco_0 = x_aruco_1 = y_aruco_1 = 0
    x_aruco_2 = y_aruco_2 = x_aruco_3 = y_aruco_3 = 0

    # Early return if there are not enough corners to process
    if len(corners) <= 1:
        # Return None or 0 for all values indicating the function cannot proceed with calculations
        return (None, None, None, None, None, None, None, None, None, None, None, None, None, None)

    # Processing starts here because there are more than 1 corner
    index_aruco_0 = np.where(ids == 0)[0]
    index_aruco_1 = np.where(ids == 1)[0]
    index_aruco_2 = np.where(ids == 2)[0]
    index_aruco_3 = np.where(ids == 3)[0]

    if index_aruco_0.size > 0:
        x_aruco_0, y_aruco_0 = corners[index_aruco_0[0]][0][0][0], corners[index_aruco_0[0]][0][0][1]
    if index_aruco_1.size > 0:
        x_aruco_1, y_aruco_1 = corners[index_aruco_1[0]][0][1][0], corners[index_aruco_1[0]][0][1][1]
    if index_aruco_2.size > 0:
        x_aruco_2, y_aruco_2 = corners[index_aruco_2[0]][0][2][0], corners[index_aruco_2[0]][0][2][1]
    if index_aruco_3.size > 0:
        x_aruco_3, y_aruco_3 = corners[index_aruco_3[0]][0][3][0], corners[index_aruco_3[0]][0][3][1]

    # Calculate distances and ratios
    # Ensure there's a check to prevent division by zero
    if x_aruco_2 and x_aruco_3 and y_aruco_2 and y_aruco_3:
        pixel_distance_x = abs(x_aruco_2 - x_aruco_3)
        pixel_distance_y = abs(y_aruco_2 - y_aruco_3)

        if pixel_distance_x == 0 or pixel_distance_y == 0:
            # Handle the case where division by zero would occur
            return (None, None, None, None, None, None, None, None, None, None, None, None, None, None)

        mm_nbr_pixel_x = float(pixel_distance_x) / DISTANCE_COIN_ARUCO_X_MM
        pixel_nbr_mm_x = 1 / mm_nbr_pixel_x if mm_nbr_pixel_x else None
        mm_nbr_pixel_y = float(pixel_distance_y) / DISTANCE_COIN_Y_MM
        pixel_nbr_mm_y = 1 / mm_nbr_pixel_y if mm_nbr_pixel_y else None
    else:
        # If we can't calculate distances because markers are not detected, return Nones or zeros
        return (None, None, None, None, None, None, None, None, None, None, None, None, None, None)

    return pixel_distance_x, mm_nbr_pixel_x, pixel_nbr_mm_x, pixel_distance_y, mm_nbr_pixel_y, pixel_nbr_mm_y, x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3


def coordrobot(corners, ids):
    x_robot = y_robot = None  # Initialize with None to handle cases where the marker isn't detected
    if len(corners) < 1:
        return None, None  # Early return if there are no corners to process
    index_robot = np.where(ids == 137)[0]
    if index_robot.size > 0:
        # Calculate the center of the ArUco marker
        marker_corners = corners[index_robot[0]][0]
        x_robot = np.mean(marker_corners[:, 0])
        y_robot = np.mean(marker_corners[:, 1])
    return x_robot, y_robot


def aruco_display(corners, ids, image):
    if len(corners) > 0:
        ids = ids.flatten()

        for (markerCorner, markerID) in zip(corners, ids):
            corners = markerCorner.reshape((4, 2))

            (topLeft, topRight, bottomRight, bottomLeft) = corners

            topRight = (int(topRight[0]), int(topRight[1]))
            bottomRight = (int(bottomRight[0]), int(bottomRight[1]))
            bottomLeft = (int(bottomLeft[0]), int(bottomLeft[1]))
            topLeft = (int(topLeft[0]), int(topLeft[1]))

            cv2.line(image, topLeft, topRight, (0, 255, 0), 2)
            cv2.line(image, topRight, bottomRight, (0, 255, 0), 2)
            cv2.line(image, bottomRight, bottomLeft, (0, 255, 0), 2)
            cv2.line(image, bottomLeft, topLeft, (0, 255, 0), 2)

            cX = int((topLeft[0] + bottomRight[0]) / 2.0)
            cY = int((topLeft[1] + bottomRight[1]) / 2.0)

            # Map ArUco marker coordinates to game card coordinates
            if markerID == 0:
                mapped_coordinates = (topLeft[0], topLeft[1])
                cv2.circle(image, mapped_coordinates, 4, (0, 0, 255), -1)
            elif markerID == 1:
                mapped_coordinates = (topRight[0], topRight[1])
                cv2.circle(image, mapped_coordinates, 4, (0, 0, 255), -1)
            elif markerID == 2:
                mapped_coordinates = (bottomRight[0], bottomRight[1])
                cv2.circle(image, mapped_coordinates, 4, (0, 0, 255), -1)
            elif markerID == 3:
                mapped_coordinates = (bottomLeft[0], bottomLeft[1])
                cv2.circle(image, mapped_coordinates, 4, (0, 0, 255), -1)
            else:
                mapped_coordinates = (cX, cY)
                cv2.circle(image, (cX, cY), 4, (0, 0, 255), -1)

            cv2.putText(image, "ID: {}".format(markerID), (topLeft[0], topLeft[1] - 10), cv2.FONT_HERSHEY_SIMPLEX,
                        0.5, (0, 255, 0), 2)

            # Display mapped coordinates on the image
            cv2.putText(image, "Mapped: ({},{})".format(mapped_coordinates[0], mapped_coordinates[1]),
                        (topLeft[0], topLeft[1] - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Print mapped coordinates in the console
            print("[Inference] ArUco marker ID: {}, Mapped Coordinates: {}".format(markerID, mapped_coordinates))

    return image


def cercle_calib(x_aruco_0, y_aruco_0, x_aruco_1, y_aruco_1, x_aruco_2, y_aruco_2, x_aruco_3, y_aruco_3, mm_nbr_pixel_x, mm_nbr_pixel_y, image):
    if pixel_distance_x is not None and pixel_distance_y is not None and mm_nbr_pixel_x is not None and mm_nbr_pixel_y is not None:

        # Dessin calib jaune
        cv2.circle(image, (
            int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 2 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib cyan
        cv2.circle(image, (
            int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 3 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib vert
        cv2.circle(image, (
            int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 4 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib magenta
        cv2.circle(image, (
            int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 5 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib rouge
        cv2.circle(image, (
            int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 6 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib bleu
        cv2.circle(image, (
            int(x_aruco_3 + TAILLE_ARUCO_COIN * mm_nbr_pixel_x + 7 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_3 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle



        ####################Dessins calib blancs !!
        # Dessin calib blanc 1
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 1 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 2
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 2 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 3
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 3 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 4
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 4 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 5
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 5 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 6
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 6 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 7
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 7 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 8
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 8 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 9
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 9 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle

        # Dessin calib blanc 10
        cv2.circle(image, (
            int(x_aruco_1 - TAILLE_ARUCO_COIN * mm_nbr_pixel_x - 10 * LONGUEUR_CALIBRATION * mm_nbr_pixel_x), int(y_aruco_1 )), 4,
                   (255, 255, 255), 2)  # -1 pour remplir le cercle


    return image


def pose_estimation(frame, arucoDict, arucoParams, matrix_coeff, distortion_coeff):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)



    detector = cv2.aruco.ArucoDetector(arucoDict, arucoParams)
    corners, ids, rejected_img_points = detector.detectMarkers(frame)

    if len(corners) > 0:
        for i in range(0, len(ids)):
            if(ids[i] == 137):

                rvec, tvec, markerPoints = cv2.aruco.estimatePoseSingleMarkers(corners[i], 0.02, matrix_coeff, distortion_coeff)

                cv2.aruco.drawDetectedMarkers(frame, corners)

                cv2.drawFrameAxes(frame, matrix_coeff, distortion_coeff, rvec, tvec, 0.05, 2)

    return frame





aruco_type = "DICT_ARUCO_ORIGINAL"

arucoDict = cv2.aruco.getPredefinedDictionary(ARUCO_DICT[aruco_type])

arucoParams = cv2.aruco.DetectorParameters()

# cap = cv2.VideoCapture("./Images/mapvideoframe.jpg")



intrinsic_camera = np.array(((933.15867, 0, 657.59),(0,933.1586, 400.36993),(0,0,1)))
distortion = np.array((-0.43948, 0.18514, 0, 0))


cap = cv2.VideoCapture("./Videos/mapvideo.mp4")

cap.set(cv2.CAP_PROP_FRAME_WIDTH, IMAGE_LONGUEUR)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, IMAGE_LARGEUR)



while cap.isOpened():

    ret, img = cap.read()

    h, w, _ = img.shape
    print("Lecture d'image réussie. Shape: {}".format((h, w)))

    '''
    width = 1920
    height = int(width * (h / w))
    img = cv2.resize(img, (width, height), interpolation=cv2.INTER_CUBIC)
    '''





    output = pose_estimation(img, arucoDict, arucoParams, intrinsic_camera, distortion)

    cv2.imshow("Estimate Pose", output)


    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()
